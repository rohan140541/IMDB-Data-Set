
"""IMDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ei3u3GB4dyWW8Gx7fV8vatY7j5gJeibb

# **Import The Data**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

"""## **`Read The Data`**"""

df=pd.read_csv("/content/imdb_top_1000.csv")
df.tail(3)

df.head(3)

df.info()

df.drop('Poster_Link',axis=1,inplace=True)

"""##`Change The Data Type`"""

df["Released_Year"].unique()

# Released_year convert the object to int
df=df[df['Released_Year']!="PG"]
df["Released_Year"] = df['Released_Year'].astype(int)

df['Gross'].unique()

df.info()

df["Gross"] = (df["Gross"]
                  .str.replace("$", "",regex=False)
                  .str.replace(",", "")
                  .astype(float)
                 )

"""##`Check The Duplicate Value`"""

# No Any Duplicate Values
df.duplicated().sum()

"""##`Check The Null Values`"""

df.isnull().sum()

df['Certificate'] = df['Certificate'].fillna('Unrated')
df['Meta_score'].fillna(df['Meta_score'].mode()[0], inplace=True)
df['Gross'].fillna(df['Gross'].mode()[0], inplace=True)

print(df.isnull().sum())

df['Stars'] = df[['Star1', 'Star2', 'Star3', 'Star4']].apply(lambda x: ','.join(x.dropna()), axis=1)
df = df.drop(columns = ['Star1', 'Star2', 'Star3', 'Star4'])
df.head(2)

"""## **Most Popular Genres**"""

sorted_ser_count = df['Genre'].value_counts().nlargest(5)
sorted_ser_count

ax = sns.barplot(x = sorted_ser_count.index,y = sorted_ser_count.values,color = '#33FF57')
ax.bar_label(ax.containers[0])
plt.title("Most Popular Genres")
plt.xticks(rotation = 45)
plt.show()

"""## **Top Rated Movies**"""

df.head()

top_rated = df.sort_values(by='IMDB_Rating', ascending=False).head(10)
top_rated = top_rated[['Series_Title', 'IMDB_Rating']]
top_rated = pd.DataFrame(top_rated).reset_index(drop=True)
top_rated.index += 1
top_rated

"""## **Numbers Of Votes Vs IMDB Rating**"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df["IMDB_Rating"], y=df["No_of_Votes"])
plt.title("Number of Votes vs. IMDB Rating")
plt.xlabel("IMDB Rating")
plt.ylabel("Number of Votes")
plt.show()

"""## **Top Directors By Number Of Movies**"""

top_directors = df["Director"].value_counts().nlargest(10)
plt.figure(figsize=(10, 6))
ax = sns.barplot(y=top_directors.index, x=top_directors.values,color = '#FF33A1')
ax.bar_label(ax.containers[0])
plt.title("Top Directors by Number of Movies")
plt.xlabel("Number of Movies")
plt.ylabel("Director")
plt.show()

df.head(2)

"""## **`Most Earned Movies as Percentage of Total Revenue`**"""

top_movies = df.sort_values(by='Gross', ascending=False)
top_movies = top_movies[['Series_Title', 'Gross']].head(5)
top_movies = pd.DataFrame(top_movies).reset_index(drop=True)

top_movies['Gross_Percentage'] = (top_movies['Gross'] / top_movies['Gross'].sum()) * 100

plt.figure(figsize=(10, 6))
ax = sns.barplot(data=top_movies, x='Series_Title', y='Gross_Percentage',color = 'Brown')

for p in ax.patches:
    ax.annotate(f'{p.get_height():.1f}%',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center', va='bottom', fontsize=10, color='black')

plt.title("Most Earned Movies (Percentage)")
plt.ylabel("Gross Revenue (%)")
plt.xlabel("Movies")
plt.xticks(rotation=90)

plt.show()

